
<form method='POST' action='/test' onsubmit='generatePassword(); generateEmail();'>
  <div>
    <label for='first_name'>First Name:</label>
    <input type='text' id='first_name' name='first_name' required />
  </div>

  <div>
    <label for='last_name'>Last Name:</label>
    <input type='text' id='last_name' name='last_name' required />
  </div>

  <div>
    <label for='date_of_birth'>Date of Birth:</label>
    <input type='date' id='date_of_birth' name='date_of_birth' required />
  </div>

  <div>
    <label for='sex'>Sex:</label>
    <select id='sex' name='sex' required>
      <option value= 0 >Male</option>
      <option value= 1 >Female</option>
    </select>
  </div>

  <div>
    <label for='side_id'>Relation Type:</label>
    <select id='side_id' name='side_id' required>
      <option value= 1 >Father</option>
      <option value= 2 >Mother</option>
      <option value= 3 >Spouse</option>
      <option value= 4 >Sibling</option>
      <option value= 5 >Child</option>
    </select>
  </div>

 <!-- <div>
    <label for="profile_pic">Profile Picture (URL):</label>
    <input type="url" id="profile_pic" name="profile_pic" required />
  </div>

  <div id="drop_zone" style="border: 2px dashed #ccc; padding: 20px; margin-top: 20px;">
    <p>Drag and drop an image here</p>
  </div> -->

    <div id="drop-area">
    <p>Drag and drop an image file here, or click to select.</p>
  </div>

  <div>
  <label for="biography">Biography (max 100 words):</label>
  <textarea id="biography" name="biography" rows="4" cols="50" oninput="checkBiographyLength()" required></textarea>
  <span id="biographyLengthInfo">0/100 words</span>
  </div>

  <input type='hidden' id='password' name='password' />
  <input type='hidden' id='email' name='email' />
  <input type='hidden' id='req_params_id' name='req_params_id' value='{{this.payload.req_params_id}}' />




  <input type='hidden' id='user_id' name='user_id' value= {{this.payload.user_id}} />
  <input type='hidden' id='who_related_id' name='who_related_id' value= {{this.payload.source_id}} />
  {{!-- <input type='hidden' id='generation' name='generation' value= {{this.payload.source_id}} /> --}}
  <input type='hidden' id='source_id' name='source_id' value= {{this.payload.who_related_id}} />
  <input type='hidden' id='side_from_sex' name='side_from_sex' value= {{this.payload.side_from_sex}} />




  <button type='submit'>Post</button>
</form>

<script>
 function generatePassword() {
   const firstName = document.getElementById('first_name').value;
   const lastName = document.getElementById('last_name').value;
   const password = 'password' + firstName + lastName;
   document.getElementById('password').value = password.toString();
 }
 function generateEmail() {
   const firstName = document.getElementById('first_name').value;
   const email = firstName + '@email.com';
   document.getElementById('email').value = email.toString();
 }


//    const dropZone = document.getElementById('drop_zone');
//    const profilePicInput = document.getElementById('profile_pic');
//
//    dropZone.addEventListener('dragover', (event) => {
//      event.preventDefault();
//      dropZone.style.backgroundColor = '#f3f3f3';
//    });
//
//    dropZone.addEventListener('dragleave', (event) => {
//      event.preventDefault();
//      dropZone.style.backgroundColor = '';
//    });
//
//    dropZone.addEventListener('drop', (event) => {
//      event.preventDefault();
//      dropZone.style.backgroundColor = '';
//
//      const file = event.dataTransfer.files[0];
//      if (file) {
//        const reader = new FileReader();
//
//        reader.onload = (e) => {
//          const base64Data = e.target.result.split(',')[1];
//          profilePicInput.value = 'data:image/jpeg;base64,' + base64Data;
//          uploadImage(base64Data);
//        };
//
//        reader.readAsDataURL(file);
//      }
//    });

const dropArea = document.getElementById('drop-area');

// Prevent default behavior (open as link for some elements)
dropArea.addEventListener('dragover', (e) => {
  e.preventDefault();
});

dropArea.addEventListener('drop', (e) => {
  e.preventDefault();
  const files = e.dataTransfer.files;
  handleFiles(files);
});

dropArea.addEventListener('click', () => {
  // Trigger the file input dialog when the user clicks the drop area
  fileInput.click();
});

// Create a file input element (hidden) and trigger it when the user clicks on the drop area
const fileInput = document.createElement('input');
fileInput.type = 'file';
fileInput.accept = 'image/*'; // Accept only image files
fileInput.style.display = 'none';

fileInput.addEventListener('change', (e) => {
  const files = e.target.files;
  handleFiles(files);
});

function handleFiles(files) {
  const file = files[0];
  const reader = new FileReader();
  reader.onload = (event) => {
    const imageUrl = event.target.result;
    // Send the image file to your back-end API
    uploadImage(file, imageUrl);
  };
  reader.readAsDataURL(file);
}

function uploadImage(file, imageUrl) {
  // Create a FormData object to send the file to the server
  const formData = new FormData();
  formData.append('image', file);

  // Make a POST request to your API endpoint for image upload
  fetch('/api/upload', {
    method: 'POST',
    body: formData
  })
    .then(response => response.json())
    .then(data => {
      // Handle the response from the server, if needed
      console.log(data);
    })
    .catch(error => {
      // Handle any errors that occurred during the request
      console.error(error);
    });
}

// utilise the /upload route
function uploadImage(imageData) {
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/upload', true);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          console.log('Image uploaded successfully!');
        } else {
          console.error('Image upload failed!');
        }
      }
    };

    const formData = new FormData();
    formData.append('file', imageData);

    xhr.send(formData);
  }

</script>



